"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var node_fetch_1 = require("node-fetch");
var query_string_1 = require("query-string");
/**
 * Client for Cabul Wrapper
 */
var CabulClient = /** @class */ (function () {
    function CabulClient(options) {
        if (options === void 0) { options = {
            url: 'http://192.145.238.5/~pasirm5/v3'
        }; }
        this.baseURL = options.url;
    }
    /**
     * Hentai endpoint
     */
    CabulClient.prototype.hentai = function () {
        return this.get('hentai').then(function (body) { return body; });
    };
    /**
     * Ecchi endpoint
     */
    CabulClient.prototype.ecchi = function () {
        return this.get('ecchi').then(function (body) { return body; });
    };
    /**
     * Netorare endpoint
     */
    CabulClient.prototype.netorare = function () {
        return this.get('netorare').then(function (body) { return body; });
    };
    /**
     * Kemonomimi endpoint
     */
    CabulClient.prototype.kemonomimi = function () {
        return this.get('kemonomimi').then(function (body) { return body; });
    };
    /**
     * Yuri endpoint
     */
    CabulClient.prototype.yuri = function () {
        return this.get('yuri').then(function (body) { return body; });
    };
    /**
     * Thicc endpoint
     */
    CabulClient.prototype.thicc = function () {
        return this.get('thicc').then(function (body) { return body; });
    };
    /**
     * Ahegao endpoint
     */
    CabulClient.prototype.ahegao = function () {
        return this.get('ahegao').then(function (body) { return body; });
    };
    /**
     * Monster endpoint
     */
    CabulClient.prototype.monster = function () {
        return this.get('monster').then(function (body) { return body; });
    };
    /**
     * Bondage endpoint
     */
    CabulClient.prototype.bondage = function () {
        return this.get('hentaibondage').then(function (body) { return body; });
    };
    /**
     * Trap endpoint
     */
    CabulClient.prototype.trap = function () {
        return this.get('trap').then(function (body) { return body; });
    };
    /**
     * Pantsu endpoint
     */
    CabulClient.prototype.pantsu = function () {
        return this.get('pantsu').then(function (body) { return body; });
    };
    /**
     * Milf endpoint
     */
    CabulClient.prototype.milf = function () {
        return this.get('milf').then(function (body) { return body; });
    };
    /**
     * Zettairyouiki endpoint
     */
    CabulClient.prototype.zettairyouiki = function () {
        return this.get('zettairyouiki').then(function (body) { return body; });
    };
    /**
     * Nekomimi endpoint
     */
    CabulClient.prototype.nekomimi = function () {
        return this.get('nekomimi').then(function (body) { return body; });
    };
    /**
     * Paizuri endpoint
     */
    CabulClient.prototype.paizuri = function () {
        return this.get('paizuri').then(function (body) { return body; });
    };
    /**
     * Booty endpoint
     */
    CabulClient.prototype.booty = function () {
        return this.get('booty').then(function (body) { return body; });
    };
    /**
     * Waifusgonewild endpoint
     */
    CabulClient.prototype.waifusgonewild = function () {
        return this.get('waifusgonewild').then(function (body) { return body; });
    };
    /**
     * Gameovergirls endpoint
     */
    CabulClient.prototype.gameovergirls = function () {
        return this.get('gameovergirls').then(function (body) { return body; });
    };
    /**
     * Sukebei endpoint
     */
    CabulClient.prototype.sukebei = function () {
        return this.get('sukebei').then(function (body) { return body; });
    };
    /**
     * Cum endpoint
     */
    CabulClient.prototype.cum = function () {
        return this.get('cum').then(function (body) { return body; });
    };
    /**
     * Corruptionhentai endpoint
     */
    CabulClient.prototype.corruptionhentai = function () {
        return this.get('corruptionhentai').then(function (body) { return body; });
    };
    /**
     * Chiisai endpoint
     */
    CabulClient.prototype.chiisai = function () {
        return this.get('chiisai').then(function (body) { return body; });
    };
    /**
     * Muchi endpoint
     */
    CabulClient.prototype.muchi = function () {
        return this.get('muchi').then(function (body) { return body; });
    };
    /**
     * Tentai endpoint
     */
    CabulClient.prototype.tentai = function () {
        return this.get('tentai').then(function (body) { return body; });
    };
    /**
     * Dekai endpoint
     */
    CabulClient.prototype.dekai = function () {
        return this.get('dekai').then(function (body) { return body; });
    };
    /**
     * Yaoi endpoint
     */
    CabulClient.prototype.yaoi = function () {
        return this.get('yaoi').then(function (body) { return body; });
    };
    /**
     * Oral endpoint
     */
    CabulClient.prototype.oral = function () {
        return this.get('oral').then(function (body) { return body; });
    };
    /**
     * Armpits endpoint
     */
    CabulClient.prototype.armpits = function () {
        return this.get('armpits').then(function (body) { return body; });
    };
    /**
     * Bodysuits endpoint
     */
    CabulClient.prototype.bodysuits = function () {
        return this.get('bodysuits').then(function (body) { return body; });
    };
    /**
     * Rippedlegwear endpoint
     */
    CabulClient.prototype.rippedlegwear = function () {
        return this.get('rippedlegwear').then(function (body) { return body; });
    };
    /**
     * Atago endpoint
     */
    CabulClient.prototype.atago = function () {
        return this.get('atago').then(function (body) { return body; });
    };
    /**
     * handbras endpoint
     */
    CabulClient.prototype.handbras = function () {
        return this.get('handbras').then(function (body) { return body; });
    };
    /**
     * Elf endpoint
     */
    CabulClient.prototype.elf = function () {
        return this.get('elf').then(function (body) { return body; });
    };
    /**
     * Ecchibondage endpoint
     */
    CabulClient.prototype.ecchibondage = function () {
        return this.get('ecchibondage').then(function (body) { return body; });
    };
    /**
     * Cleavage endpoint
     */
    CabulClient.prototype.cleavage = function () {
        return this.get('cleavage').then(function (body) { return body; });
    };
    /**
     * Maid endpoint
     */
    CabulClient.prototype.maid = function () {
        return this.get('maid').then(function (body) { return body; });
    };
    /**
     * Usagi endpoint
     */
    CabulClient.prototype.usagi = function () {
        return this.get('usagi').then(function (body) { return body; });
    };
    /**
     * Lactation endpoint
     */
    CabulClient.prototype.lactation = function () {
        return this.get('lactation').then(function (body) { return body; });
    };
    /**
     * Feet endpoint
     */
    CabulClient.prototype.feet = function () {
        return this.get('feet').then(function (body) { return body; });
    };
    /**
     * Lewd endpoint
     */
    CabulClient.prototype.lewd = function () {
        return this.get('lewd').then(function (body) { return body; });
    };
    /**
     * Taihou endpoint
     */
    CabulClient.prototype.taihou = function () {
        return this.get('taihou').then(function (body) { return body; });
    };
    /**
     * Christmascake endpoint
     */
    CabulClient.prototype.christmascake = function () {
        return this.get('christmascake').then(function (body) { return body; });
    };
    /**
     * Rikka endpoint
     */
    CabulClient.prototype.rikka = function () {
        return this.get('rikka').then(function (body) { return body; });
    };
    /**
     * Hearts endpoint
     */
    CabulClient.prototype.hearts = function () {
        return this.get('hearts').then(function (body) { return body; });
    };
    /**
     * Bisex endpoint
     */
    CabulClient.prototype.bisex = function () {
        return this.get('bisex').then(function (body) { return body; });
    };
    /**
     * Smothering endpoint
     */
    CabulClient.prototype.smothering = function () {
        return this.get('smothering').then(function (body) { return body; });
    };
    /**
     * Vacuum endpoint
     */
    CabulClient.prototype.vacuum = function () {
        return this.get('vacuum').then(function (body) { return body; });
    };
    /**
     * Humiliation endpoint
     */
    CabulClient.prototype.humiliation = function () {
        return this.get('humiliation').then(function (body) { return body; });
    };
    /**
     * Forniphilia endpoint
     */
    CabulClient.prototype.forniphilia = function () {
        return this.get('forniphilia').then(function (body) { return body; });
    };
    /**
     * Officelady endpoint
     */
    CabulClient.prototype.officelady = function () {
        return this.get('officelady').then(function (body) { return body; });
    };
    /**
     * Dtittytouching endpoint
     */
    CabulClient.prototype.dtittytouching = function () {
        return this.get('2dtittytouching').then(function (body) { return body; });
    };
    /**
     * Inumimi endpoint
     */
    CabulClient.prototype.inumimi = function () {
        return this.get('inumimi').then(function (body) { return body; });
    };
    /**
     * Cumsluts endpoint
     */
    CabulClient.prototype.cumsluts = function () {
        return this.get('cumsluts').then(function (body) { return body; });
    };
    /**
     * Heterochromia endpoint
     */
    CabulClient.prototype.heterochromia = function () {
        return this.get('heterochromia').then(function (body) { return body; });
    };
    /**
     * Ai endpoint
     */
    CabulClient.prototype.ai = function () {
        return this.get('ai').then(function (body) { return body; });
    };
    /**
     * Pokeportn endpoint
     */
    CabulClient.prototype.pokeporn = function () {
        return this.get('pokeporn').then(function (body) { return body; });
    };
    /**
     * Rule34 endpoint
     */
    CabulClient.prototype.rule34 = function () {
        return this.get('rule34').then(function (body) { return body; });
    };
    /**
     * Western endpoint
     */
    CabulClient.prototype.western = function () {
        return this.get('western').then(function (body) { return body; });
    };
    /**
     * Lol endpoint
     */
    CabulClient.prototype.lol = function () {
        return this.get('lol').then(function (body) { return body; });
    };
    /**
     * Arknuts endpoint
     */
    CabulClient.prototype.arknuts = function () {
        return this.get('arknuts').then(function (body) { return body; });
    };
    /**
     * Overwatch endpoint
     */
    CabulClient.prototype.overwatch = function () {
        return this.get('overwatch').then(function (body) { return body; });
    };
    /**
     * twob endpoint
     */
    CabulClient.prototype.twob = function () {
        return this.get('2b').then(function (body) { return body; });
    };
    /**
     * Kanmusunights endpoint
     */
    CabulClient.prototype.kanmusunights = function () {
        return this.get('kanmusunights').then(function (body) { return body; });
    };
    /**
     * Private method used to get endpoints with querys
     */
    CabulClient.prototype.get = function (endpoint, version, params) {
        if (version === void 0) { version = 'cabul'; }
        return __awaiter(this, void 0, void 0, function () {
            var fetchURL, res, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fetchURL = this.baseURL + "/" + version + "/?" + endpoint;
                        if (params) {
                            fetchURL += query_string_1.stringify(params);
                        }
                        return [4 /*yield*/, node_fetch_1.default(fetchURL)];
                    case 1:
                        res = _a.sent();
                        if (res.status !== 200)
                            throw res;
                        return [4 /*yield*/, res.json()];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    return CabulClient;
}());
exports.default = CabulClient;
